import { pool } from '../db.js'

// Limpa registros com mais de 72h e faz o fechamento di치rio das principais tabelas
export async function cleanupDatabase() {
  // Limpeza signals
  await pool.query(`
    DELETE FROM signals
    WHERE created_at < NOW() - INTERVAL '72 HOURS'
  `)

  // Fechamento di치rio signals
  await pool.query(`
    INSERT INTO signals_daily (ticker, date, avg_close, max_close, min_close)
    SELECT
      ticker,
      DATE_TRUNC('day', created_at) AS date,
      AVG(close) AS avg_close,
      MAX(close) AS max_close,
      MIN(close) AS min_close
    FROM signals
    WHERE created_at < NOW()
    GROUP BY ticker, date
    ON CONFLICT (ticker, date) DO NOTHING
  `)

  // Limpeza dominance
  await pool.query(`
    DELETE FROM dominance
    WHERE created_at < NOW() - INTERVAL '72 HOURS'
  `)

  // Fechamento di치rio dominance
  await pool.query(`
    INSERT INTO dominance_daily (date, avg_btc_dominance, max_btc_dominance, min_btc_dominance)
    SELECT
      DATE_TRUNC('day', created_at) AS date,
      AVG(btc_dominance) AS avg_btc_dominance,
      MAX(btc_dominance) AS max_btc_dominance,
      MIN(btc_dominance) AS min_btc_dominance
    FROM dominance
    WHERE created_at < NOW()
    GROUP BY date
    ON CONFLICT (date) DO NOTHING
  `)

  // Limpeza fear_greed
  await pool.query(`
    DELETE FROM fear_greed
    WHERE created_at < NOW() - INTERVAL '72 HOURS'
  `)

  // Fechamento di치rio fear_greed
  await pool.query(`
    INSERT INTO fear_greed_daily (date, avg_value, max_value, min_value)
    SELECT
      DATE_TRUNC('day', created_at) AS date,
      AVG(value) AS avg_value,
      MAX(value) AS max_value,
      MIN(value) AS min_value
    FROM fear_greed
    WHERE created_at < NOW()
    GROUP BY date
    ON CONFLICT (date) DO NOTHING
  `)
}
